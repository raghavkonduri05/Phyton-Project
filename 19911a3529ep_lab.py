# -*- coding: utf-8 -*-
"""19911A3529EP_Lab.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1y6S0fYI8J_d1gT4uL4B5A6oBPgXNdhc0
"""

pip install sklearn

!pip install jupyterthemes

"""# Exercise 1

**Write a program to demonstrate the use of basic Data Types**
"""

x = int (input('Enter a number : '))
print('The number is : ',x,'and it is a of type : ',type(x))
y = float (input('Enter a float number :'))
print('The number is : ',y,'and it is a of type : ',type(y))
z = 8-7j
print('The number is : ',z,'and it is a of type : ',type(z))

"""**Write a program to demonstrate the Operators and Expressions**"""

x = 69
y = 20
print('x + y =',x+y)
print('x - y =',x-y)
print('x * y =',x*y)
print('x / y =',x/y)
print('x ** y =',x**y)
print('x // y =',x//y)
x = 25
y = 54
print('x > y is',x>y)
print('x < y is',x<y)
print('x != y is',x!=y)
print('x == y is',x==y)
print('x >= y is',x>=y)
print('x <= y is',x<=y)

"""**Write a program to demonstrate the Functions and parameter passing Techniques.**"""

def my_function (a,b):
  a = int (input('Enter a number :'))
  b = int (input('Enter a number :'))
  print(a+b)

my_function(_,_)

"""# Exercise 2

Write a Program to implement

i. Packages 

ii. Modules 

iii. Built-in Functions
"""

def add(a, b):
   """This program adds two
   numbers and return the result"""

   result = a + b
   import example
   print(example.add(4,5.5))

#built in functions
a = 12
print(abs(a))

tuple = (0, True, False)
x = all(tuple)
print(x)

myset = {0, 1, 0}
x = any(myset)
print(x)

p=5
print(bin(p))

print(round(4.5))

"""Write a Program to implement

i. List 

ii. Tuple 

iii. Dictionaries
"""

test_list =['Hello',55,58,7,'AI','welcome',]
print(test_list)
test_tuples = ('Hello',1,2)
print(test_tuples)
test_dict = {'key1': 4+4,'key2': 7+7 ,'key4' :8+8}
print(test_dict)

"""Programs on Stings, String Operations and Regular Expressions"""

# String 
str1 = 'Hello, '
str2 = 'this is xyz.'
print(str1+str2)
# String operations
s = "Hey there! what should this string be?"
print("Length of s = %d" % len(s))
print("The first occurrence of the letter a = %d" % s.index("a"))
print("a occurs %d times" % s.count("a"))
print("The first five characters are '%s'" % s[:5]) 
print("The next five characters are '%s'" % s[5:10]) 
print("The thirteenth character is '%s'" % s[12]) 
print("The characters with odd index are '%s'" %s[1::2])
print("The last five characters are '%s'" % s[-5:]) 

print("String in uppercase: %s" % s.upper())

print("String in lowercase: %s" % s.lower())


if s.startswith("Str"):
    print("String starts with 'Str'. Good!")


if s.endswith("ome!"):
    print("String ends with 'ome!'. Good!")

print("Split the words of the string: %s" % s.split(" "))
#regular Expression
import re
p = re.compile('[a-e]')
print(p.findall("Aye, said Mr. Gibenson Stark"))

"""# Exercise 3

Write a Program to implement Class and Object
"""

#CLASS
class employee:
  print("This is a employee class")
  salary=10000

  def greet(self):
    return "Good morning"
#OBJECT
p1=employee
p1()
print(p1.salary)
print(p1.greet('Hello'))

"""Write a Program to implement Static and Instance methods, Abstract Classes and 
Interfaces.
"""

#static method
class Mathematics:

    def addNumbers(x, y):
        return x + y

# create addNumbers static method
Mathematics.addNumbers = staticmethod(Mathematics.addNumbers)

print('The sum is:', Mathematics.addNumbers(5, 10))

#instance method
# Python program to demonstrate
# instance methods


class shape:
	
	# Calling Constructor
	def __init__(self, edge, color):
		self.edge = edge
		self.color = color
		
	# Instance Method
	def finEdges(self):
		return self.edge
		
	# Instance Method
	def modifyEdges(self, newedge):
		self.edge = newedge
		
# Driver Code
circle = shape(0, 'red')
square = shape(4, 'blue')

# Calling Instance Method
print("No. of edges for circle: "+ str(circle.finEdges()))

# Calling Instance Method
square.modifyEdges(6)

print("No. of edges for square: "+ str(square.finEdges()))

#abstract class
# Python program showing
# abstract base class work

from abc import ABC, abstractmethod

class Polygon(ABC):

	@abstractmethod
	def noofsides(self):
		pass

class Triangle(Polygon):

	# overriding abstract method
	def noofsides(self):
		print("I have 3 sides")

class Pentagon(Polygon):

	# overriding abstract method
	def noofsides(self):
		print("I have 5 sides")

class Hexagon(Polygon):

	# overriding abstract method
	def noofsides(self):
		print("I have 6 sides")

class Quadrilateral(Polygon):

	# overriding abstract method
	def noofsides(self):
		print("I have 4 sides")

# Driver code
R = Triangle()
R.noofsides()

K = Quadrilateral()
K.noofsides()

R = Pentagon()
R.noofsides()

K = Hexagon()
K.noofsides()

#interface
from abc import ABC, abstractmethod
class Bank(ABC):
   @abstractmethod
   def balance_check(self):
       pass
   @abstractmethod
   def interest(self):
       pass
class SBI(Bank):
   def balance_check(self):
       print("Balance is 100 rupees")
   def interest(self):
       print("SBI interest is 5 rupees")
s = SBI()
s.balance_check()
s.interest()

"""Write a program to compute distance between two points taking input from the user 
(Pythagorean Theorem)
"""

import math
input1 = int (input('Enter a first number :'))
input2 = int (input('Enter a second number :'))
distance = input1**2 + input2**2
print(distance)
math.sqrt(distance)

"""# Exercise 4

Write a program to implement Inheritance and Polymorphism
"""

#Inheritance 
class Person(object):
    def __init__(self, name):
        self.name = name

    def get_name_of_the_person(self):
        return self.name

    def is_Employee(self):
        return False
   
# Subclass.
class Employee(Person):
   
    # Here we return true
    def is_Employee(self):
        return True
   
# Driver code
emp = Person("Ramesh")
print(emp.get_name_of_the_person(), emp.is_Employee())
   
emp = Employee("Ad") # An Object of Employee
print(emp.get_name_of_the_person(), emp.is_Employee())

#polymorphism
class Student():
    def name(self):
        print("Name of the student is xyz.")
  
    def language(self):
        print("He speaks English and Telugu.")
  
    def type(self):
        print("He is one of the average students in his class.")

class Faculty():
    def name(self):
        print()
        print("Name of the faculty is XYZ.")
  
    def language(self):
        print("He speaks English. ")
  
    def type(self):
        print("He is one of the best faculty in his department.")
    
obj_student = Student()
obj_faculty = Faculty()
for elements in (obj_student, obj_faculty):
    elements.name()
    elements.language()
    elements.type()

"""Write a program to implement Files"""

file_object = open('1st_file.txt',"w+")
for i in range(4):
  file_object.write("Never ever give Up.\n")
file_object.close()

file_object = open ('1st_file.txt',"r")
if file_object.mode == 'r':
  words = file_object.read()
print(words)

file_object = open('1st_file.txt',"a+")
for i in range(0,4,2):
     file_object.write("Raghav konduri\n")
file_object.close()

file_object = open('1st_file.txt',"r")

if file_object.mode == "r":
  contents = file_object.read()
print(contents)

file_object = open('1st_file.txt',"a+")
for i in range(0,4,2):
     file_object.write("Raghav konduri\n")
file_object.close()

file_object = open('1st_file.txt',"r")

if file_object.mode == "r":
  contents = file_object.read()
print(contents)

"""Write a program to illustrate Handling."""

var1 = int (input('Enter a number from (0-9) :'))
var2 = int (input('Enter a number from (0-9) :'))
print("zero divison error")
try :
  division = var1/var2
  print('The divsion of two variables {} and {} is {}'.format(var1,var2,division))

except (ZeroDivisionError):
  print('Cant divide the {} and {}'.format(var1,var2))

"""# Exercise 5

Write a program using scikit-learn to implement K-means Clustering
"""

import matplotlib.pyplot as plt
import numpy as np
from sklearn.cluster import KMeans
X = np.array([[5,3],
     [10,15],
     [15,12],
     [24,10],
     [30,45],
     [85,70],
     [71,80],
     [60,78],
     [55,52],
     [80,91],])
plt.scatter(X[:,0],X[:,1], label='True Position')
kmeans = KMeans(n_clusters=2)
kmeans.fit(X)
print(kmeans.cluster_centers_)
print(kmeans.labels_)
plt.scatter(X[:,0],X[:,1], c=kmeans.labels_, cmap='rainbow')
plt.scatter(X[:,0], X[:,1], c=kmeans.labels_, cmap='rainbow')
plt.scatter(kmeans.cluster_centers_[:,0] ,kmeans.cluster_centers_[:,1], color='black')

"""Program to calculate the entropy and the information gain"""

from __future__ import division
from math import log


def entropy(pi):
   

    total = 0
    for p in pi:
        p = p / sum(pi)
        if p != 0:
            total += p * log(p, 2)
        else:
            total += 0
    total *= -1
    return total


def gain(d, a):
    '''
    return the information gain:
    gain(D, A) = entropy(D)−􏰋 SUM ( |Di| / |D| * entropy(Di) )
    '''

    total = 0
    for v in a:
        total += sum(v) / sum(d) * entropy(v)

    gain = entropy(d) - total
    return gain

willWait = [6, 6] 


patron = [ [4,0], [2,4], [0,2] ] 

print(gain(willWait, patron))

playTennis = [9, 5] 


outlook = [
    [4, 0],  
    [2, 3], 
    [3, 2]   
]
temperature = [
    [2, 2],  
    [3, 1],  
    [4, 2]   
]
humidity = [
    [3, 4],  
    [6, 1]   
]
wind = [
    [6, 2],  
    [3, 3]   
]

print(gain(playTennis, outlook))
print(gain(playTennis, temperature))
print(gain(playTennis, humidity))
print(gain(playTennis, wind))

"""Program to implement perceptron"""

#import packages
import sklearn.datasets
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split


breast_cancer = sklearn.datasets.load_breast_cancer()


data = pd.DataFrame(breast_cancer.data, columns = breast_cancer.feature_names)
data["class"] = breast_cancer.target
data.head()
data.describe()


data['class'].value_counts().plot(kind = "barh")
plt.xlabel("Count")
plt.ylabel("Classes")
plt.show()

from sklearn.preprocessing import MinMaxScaler

X = data.drop("class", axis = 1)
Y = data["class"]
mnscaler = MinMaxScaler()
X = mnscaler.fit_transform(X)
X = pd.DataFrame(X, columns=data.drop("class",axis = 1).columns)


X_train, X_test, Y_train, Y_test = train_test_split(X,Y, test_size = 0.1, stratify = Y, random_state = 1)
class Perceptron:
  
  
  def __init__ (self):
    self.w = None
    self.b = None
    

  def model(self, x):
    return 1 if (np.dot(self.w, x) >= self.b) else 0
  

  def predict(self, X):
    Y = []
    for x in X:
      result = self.model(x)
      Y.append(result)
    return np.array(Y)
    
  def fit(self, X, Y, epochs = 1, lr = 1):
    self.w = np.ones(X.shape[1])
    self.b = 0
    accuracy = {}
    max_accuracy = 0
    wt_matrix = []
    #for all epochs
    for i in range(epochs):
      for x, y in zip(X, Y):
        y_pred = self.model(x)
        if y == 1 and y_pred == 0:
          self.w = self.w + lr * x
          self.b = self.b - lr * 1
        elif y == 0 and y_pred == 1:
          self.w = self.w - lr * x
          self.b = self.b + lr * 1
          
      wt_matrix.append(self.w)    
      accuracy[i] = accuracy_score(self.predict(X), Y)
      if (accuracy[i] > max_accuracy):
        max_accuracy = accuracy[i]
        chkptw = self.w
        chkptb = self.b
  
    self.w = chkptw
    self.b = chkptb
        
    print(max_accuracy)
    
    plt.plot(accuracy.values())
    plt.xlabel("Epoch #")
    plt.ylabel("Accuracy")
    plt.ylim([0, 1])
    plt.show()
    
    
    return np.array(wt_matrix)
    perceptron = Perceptron()

"""# Exercise 6

Generate a decision tree. Find the Depth of decision trees and observe the results, then 
propose some changes in DecisionTreeClassifier function to limit.
"""

class Node:
 
   
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None
 

def maxDepth(node):
    if node is None:
        return 0 ;
 
    else :
        lDepth = maxDepth(node.left)
        rDepth = maxDepth(node.right)
 
        
        if (lDepth > rDepth):
            return lDepth+1
        else:
            return rDepth+1
 
 

root = Node(20)
root.left = Node(30)
root.right = Node(48)
root.left.left = Node(15)
root.left.right = Node(50)
 
 
print ("Height of tree is %d" %(maxDepth(root)))

"""# Exercise 7

Program using panda
"""

dict = {"country": ["Brazil", "Russia", "India", "China", "South Africa"],
       "capital": ["Brasilia", "Moscow", "New Dehli", "Beijing", "Pretoria"],
       "area": [8.516, 17.10, 3.286, 9.597, 1.221],
       "population": [200.4, 143.5, 1252, 1357, 52.98] }

import pandas as pd
brics = pd.DataFrame(dict)
print(brics)

"""Program using matplotlib """

import matplotlib.pyplot as plt
 
days = [1,2,3,4,5]
 
sleeping =[7,8,6,11,7]
eating = [2,3,4,3,2]
working =[7,8,7,2,2]
playing = [8,5,7,8,13]
slices = [7,2,2,13]
activities = ['sleeping','eating','working','playing']
cols = ['c','m','r','b']
 
plt.pie(slices,
  labels=activities,
  colors=cols,
  startangle=90,
  shadow= True,
  explode=(0,0.1,0,0),
  autopct='%1.1f%%')
 
plt.title('Pie Plot')
plt.show()

"""# Exercise 8

Graph using matplotlib
"""

import matplotlib.pyplot as plt
x = [9,7,5]
y = [2,4,1]
plt.plot(x, y)
plt.xlabel('x - axis')
plt.ylabel('y - axis')
plt.title('graph')
plt.show()

"""# Exercise 9

*Vector* using matplotlib
"""

import numpy as np
from matplotlib import pyplot as plt
plt.rcParams["figure.figsize"] = [7.00, 3.50]
plt.rcParams["figure.autolayout"] = True
data = np.array([[2, 1], [-1, 2], [4, -1]])
origin = np.array([[0, 0, 0], [0, 0, 0]])
plt.quiver(*origin, data[:, 0], data[:, 1], color=['black', 'red', 'green'], scale=15)
plt.show()

class number:
    
    def __init__(self,a):
        self.num = a
    
    def __add__(self,ld):
        return self.num + ld.num
    def __sub__(self,ld):
        return self.num - ld.num
    def __mul__(self,ld):
        return self.num * ld.num
    def __truediv__(self,ld):
        return self.num / ld.num

p = number(6)
q = number(8)

print("+ :",p+q)
print("- :",p-q)
print("* :",p*q)
print("/ :",p/q)